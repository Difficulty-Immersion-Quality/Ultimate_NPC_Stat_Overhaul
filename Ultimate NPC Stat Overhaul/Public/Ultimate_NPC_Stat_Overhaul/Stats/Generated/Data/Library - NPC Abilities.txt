// ==================================== Barbarian - Rage ====================================
// In the progressions the original rage is removed and replaced with "Shout_Rage_Frenzy". We can replicate this via "CombatAIOverrideSpell", to force the AI to use the coolest Rage they have. We also prevent them from rage spamming, by checking if they already have an active rage. This is important when using mods such as "Dynamic Wildheart Barbarian" by Armarui.

// Basic Rage
new entry "Shout_Rage"
type "SpellData"
data "SpellType" "Shout"
using "Shout_Rage"
data "CombatAIOverrideSpell" "Shout_Rage_AI"

new entry "Shout_Rage_AI"
type "SpellData"
data "SpellType" "Shout"
using "Shout_Rage"
// data "CombatAIOverrideSpell" "Shout_Rage_AI"
data "CombatAIOverrideSpell" ""
// data "RequirementConditions" "not HasStatus('RAGE') and not HasStatus('CALM_EMOTIONS')"
data "RequirementConditions" "not HasStatus('RAGE') and not HasStatus('CALM_EMOTIONS') and not HasPassive('RageFrenzyUnlock') and not HasPassive('WildMagicRage') and not HasPassive('TotemSpirit_Bear') and not HasPassive('TotemSpirit_Eagle') and not HasPassive('TotemSpirit_Elk') and not HasPassive('TotemSpirit_Tiger') and not HasPassive('TotemSpirit_Wolf')"

// Berserker
new entry "Shout_Rage_Frenzy"
type "SpellData"
data "SpellType" "Shout"
using "Shout_Rage_Frenzy"
data "CombatAIOverrideSpell" "Shout_Rage_Frenzy_AI"

new entry "Shout_Rage_Frenzy_AI"
type "SpellData"
data "SpellType" "Shout"
using "Shout_Rage_Frenzy"
// data "CombatAIOverrideSpell" "Shout_Rage_Frenzy_AI"
data "CombatAIOverrideSpell" ""
// data "RequirementConditions" "not HasStatus('RAGE_FRENZY') and not HasStatus('CALM_EMOTIONS')"
data "RequirementConditions" "not HasStatus('SG_Rage') and not HasStatus('CALM_EMOTIONS')"

// Wild Magic
new entry "Shout_Rage_WildMagic"
type "SpellData"
data "SpellType" "Shout"
using "Shout_Rage_WildMagic"
data "CombatAIOverrideSpell" "Shout_Rage_WildMagic_AI"

new entry "Shout_Rage_WildMagic_AI"
type "SpellData"
data "SpellType" "Shout"
using "Shout_Rage_WildMagic"
// data "CombatAIOverrideSpell" "Shout_Rage_WildMagic_AI"
data "CombatAIOverrideSpell" ""
// data "RequirementConditions" "not HasStatus('RAGE') and not HasStatus('CALM_EMOTIONS')"
data "RequirementConditions" "not HasStatus('SG_Rage') and not HasStatus('CALM_EMOTIONS')"

// Wildheart - Bear
new entry "Shout_Rage_Totem_Bear"
type "SpellData"
data "SpellType" "Shout"
using "Shout_Rage_Totem_Bear"
data "CombatAIOverrideSpell" "Shout_Rage_Totem_Bear_AI"

new entry "Shout_Rage_Totem_Bear_AI"
type "SpellData"
data "SpellType" "Shout"
using "Shout_Rage_Totem_Bear"
// data "CombatAIOverrideSpell" "Shout_Rage_Totem_Bear_AI"
data "CombatAIOverrideSpell" ""
// data "RequirementConditions" "not HasStatus('RAGE_TOTEM_BEAR') and not HasStatus('CALM_EMOTIONS')"
data "RequirementConditions" "not HasStatus('SG_Rage') and not HasStatus('CALM_EMOTIONS')"

// Wildheart - Eagle
new entry "Shout_Rage_Totem_Eagle"
type "SpellData"
data "SpellType" "Shout"
using "Shout_Rage_Totem_Eagle"
data "CombatAIOverrideSpell" "Shout_Rage_Totem_Eagle_AI"

new entry "Shout_Rage_Totem_Eagle_AI"
type "SpellData"
data "SpellType" "Shout"
using "Shout_Rage_Totem_Eagle"
// data "CombatAIOverrideSpell" "Shout_Rage_Totem_Eagle_AI"
data "CombatAIOverrideSpell" ""
// data "RequirementConditions" "not HasStatus('RAGE_TOTEM_EAGLE') and not HasStatus('CALM_EMOTIONS')"
data "RequirementConditions" "not HasStatus('SG_Rage') and not HasStatus('CALM_EMOTIONS')"

// Wildheart - Elf
new entry "Shout_Rage_Totem_Elk"
type "SpellData"
data "SpellType" "Shout"
using "Shout_Rage_Totem_Elk"
data "CombatAIOverrideSpell" "Shout_Rage_Totem_Elk_AI"

new entry "Shout_Rage_Totem_Elk_AI"
type "SpellData"
data "SpellType" "Shout"
using "Shout_Rage_Totem_Elk"
// data "CombatAIOverrideSpell" "Shout_Rage_Totem_Elk_AI"
data "CombatAIOverrideSpell" ""
// data "RequirementConditions" "not HasStatus('RAGE_TOTEM_ELK') and not HasStatus('CALM_EMOTIONS')"
data "RequirementConditions" "not HasStatus('SG_Rage') and not HasStatus('CALM_EMOTIONS')"

// Wildheart - Tiger
new entry "Shout_Rage_Totem_Tiger"
type "SpellData"
data "SpellType" "Shout"
using "Shout_Rage_Totem_Tiger"
data "CombatAIOverrideSpell" "Shout_Rage_Totem_Tiger_AI"

new entry "Shout_Rage_Totem_Tiger_AI"
type "SpellData"
data "SpellType" "Shout"
using "Shout_Rage_Totem_Tiger"
// data "CombatAIOverrideSpell" "Shout_Rage_Totem_Tiger_AI"
data "CombatAIOverrideSpell" ""
// data "RequirementConditions" "not HasStatus('RAGE_TOTEM_TIGER') and not HasStatus('CALM_EMOTIONS')"
data "RequirementConditions" "not HasStatus('SG_Rage') and not HasStatus('CALM_EMOTIONS')"

// Wildheart - Wolf
new entry "Shout_Rage_Totem_Wolf"
type "SpellData"
data "SpellType" "Shout"
using "Shout_Rage_Totem_Wolf"
data "CombatAIOverrideSpell" "Shout_Rage_Totem_Wolf_AI"

new entry "Shout_Rage_Totem_Wolf_AI"
type "SpellData"
data "SpellType" "Shout"
using "Shout_Rage_Totem_Wolf"
// data "CombatAIOverrideSpell" "Shout_Rage_Totem_Wolf_AI"
data "CombatAIOverrideSpell" ""
// data "RequirementConditions" "not HasStatus('RAGE_TOTEM_WOLF') and not HasStatus('CALM_EMOTIONS')"
data "RequirementConditions" "not HasStatus('SG_Rage') and not HasStatus('CALM_EMOTIONS')"

// ==================================== Barbarian - Intimidating Presence ====================================

// Giving Intimidating Presence a bonus action cost (since it's not worth the action) and per battle cooldown (so NPCs don't just spam it)
new entry "Target_IntimidatingPresence"
type "SpellData"
data "SpellType" "Target"
using "Target_IntimidatingPresence"
data "CombatAIOverrideSpell" "Target_IntimidatingPresence_AI"

new entry "Target_IntimidatingPresence_AI"
type "SpellData"
data "SpellType" "Target"
using "Target_IntimidatingPresence"
// data "CombatAIOverrideSpell" "Target_IntimidatingPresence_AI"
data "CombatAIOverrideSpell" ""
// data "UseCosts" "ActionPoint:1"
data "UseCosts" "BonusActionPoint:1"
data "Cooldown" "OncePerCombat"

new entry "Target_IntimidatingPresence_Maintain"
type "SpellData"
data "SpellType" "Target"
// using "Target_IntimidatingPresence"
using "Target_IntimidatingPresence_Maintain"
data "CombatAIOverrideSpell" "Target_IntimidatingPresence_Maintain_AI"

new entry "Target_IntimidatingPresence_Maintain_AI"
type "SpellData"
data "SpellType" "Target"
using "Target_IntimidatingPresence_Maintain"
// data "CombatAIOverrideSpell" "Target_IntimidatingPresence_Maintain_AI"
data "CombatAIOverrideSpell" ""
// data "UseCosts" "ActionPoint:1"
data "UseCosts" "BonusActionPoint:1"
data "Cooldown" "OncePerCombat"

// ==================================== Bard - Bardic Inspiration ====================================

new entry "Target_BardicInspiration"
type "SpellData"
data "SpellType" "Target"
using "Target_BardicInspiration"
data "CombatAIOverrideSpell" "Target_BardicInspiration_AI"

new entry "Target_BardicInspiration_AI"
type "SpellData"
data "SpellType" "Shout"
using "Target_BardicInspiration"
// data "SpellProperties" "IF(not ClassLevelHigherOrEqualThan(5,'Bard')):ApplyStatus(BARDIC_INSPIRATION,100, -1);IF(ClassLevelHigherOrEqualThan(5,'Bard') and not ClassLevelHigherOrEqualThan(10,'Bard')):ApplyStatus(BARDIC_INSPIRATION_D8,100, -1);IF(ClassLevelHigherOrEqualThan(10,'Bard')):ApplyStatus(BARDIC_INSPIRATION_D10,100, -1);AI_ONLY:ApplyStatus(AI_HELPER_BARDIC_INSPIRATION,100,3)"
data "SpellProperties" "IF(not ClassLevelHigherOrEqualThan(5,'NPC_Bard')):ApplyStatus(BARDIC_INSPIRATION,100, -1);IF(ClassLevelHigherOrEqualThan(5,'NPC_Bard') and not ClassLevelHigherOrEqualThan(10,'NPC_Bard') or HasStatus('GOON_NPC_BARD_LVL_5') or HasStatus('GOON_NPC_BARD_LVL_6') or HasStatus('GOON_NPC_BARD_LVL_7') or HasStatus('GOON_NPC_BARD_LVL_8') or HasStatus('GOON_NPC_BARD_LVL_9')):ApplyStatus(BARDIC_INSPIRATION_D8,100, -1);IF(ClassLevelHigherOrEqualThan(10,'NPC_Bard') and not ClassLevelHigherOrEqualThan(15,'NPC_Bard') or HasStatus('GOON_NPC_BARD_LVL_10') or HasStatus('GOON_NPC_BARD_LVL_11') or HasStatus('GOON_NPC_BARD_LVL_12') or HasStatus('GOON_NPC_BARD_LVL_13') or HasStatus('GOON_NPC_BARD_LVL_14')):ApplyStatus(BARDIC_INSPIRATION_D10,100, -1);IF(ClassLevelHigherOrEqualThan(15,'NPC_Bard') or HasStatus('GOON_NPC_BARD_LVL_15') or HasStatus('GOON_NPC_BARD_LVL_16') or HasStatus('GOON_NPC_BARD_LVL_17') or HasStatus('GOON_NPC_BARD_LVL_18') or HasStatus('GOON_NPC_BARD_LVL_19') or HasStatus('GOON_NPC_BARD_LVL_20')):ApplyStatus(BARDIC_INSPIRATION_D12,100, -1);AI_ONLY:ApplyStatus(AI_HELPER_BARDIC_INSPIRATION,100,3)"
// data "TargetConditions" "Character() and not Enemy() and not Self() and not (HasStatus('BARDIC_INSPIRATION') or HasStatus('BARDIC_INSPIRATION_D8') or HasStatus('BARDIC_INSPIRATION_COMBAT') or HasStatus('BARDIC_INSPIRATION_COMBAT_D8'))"
data "TargetConditions" "Character() and not Enemy() and not Self() and not (HasStatus('BARDIC_INSPIRATION') or HasStatus('BARDIC_INSPIRATION_D8') or HasStatus('BARDIC_INSPIRATION_D10') or HasStatus('BARDIC_INSPIRATION_D12') or HasStatus('BARDIC_INSPIRATION_COMBAT') or HasStatus('BARDIC_INSPIRATION_COMBAT_D8') or HasStatus('BARDIC_INSPIRATION_COMBAT_D10') or HasStatus('BARDIC_INSPIRATION_COMBAT_D12'))"
data "RequirementConditions" "not HasPassive('CombatInspiration')"
// data "CombatAIOverrideSpell" "Target_BardicInspiration_AI"
data "CombatAIOverrideSpell" ""

// ==================================== Druid - Fungal Infestation resource passives ====================================

// Prevent breaking of Symbiotic Entity by shapeshifting needlessly
new entry "Shout_WildShape"
type "SpellData"
data "SpellType" "Shout"
using "Shout_WildShape"
// data "RequirementConditions" "not HasStatus('WILDSHAPE_ACTIVE')"
data "RequirementConditions" "not HasStatus('WILDSHAPE_ACTIVE') and not HasStatus('GOON_SYMBIOTIC_ENTITY_AI')"

// Makes health scaling actually work for NPC progressions
new entry "Shout_SymbioticEntity"
type "SpellData"
data "SpellType" "Shout"
using "Shout_SymbioticEntity"
data "CombatAIOverrideSpell" "Shout_SymbioticEntity_AI"

new entry "Shout_SymbioticEntity_AI"
type "SpellData"
data "SpellType" "Shout"
using "Shout_SymbioticEntity"
// data "SpellProperties" "ApplyStatus(SYMBIOTIC_ENTITY,100,-1)"
data "SpellProperties" "ApplyStatus(GOON_SYMBIOTIC_ENTITY_AI,100,-1)"
// data "DescriptionParams" "GainTemporaryHitPoints(ClassLevel(Druid)*4);DealDamage(1d6,Necrotic)"
data "DescriptionParams" "GainTemporaryHitPoints(ClassLevel(NPC_Druid)*4);DealDamage(1d6,Necrotic)"
// data "CombatAIOverrideSpell" "Shout_SymbioticEntity_AI"
data "CombatAIOverrideSpell" ""

new entry "GOON_SYMBIOTIC_ENTITY_AI"
type "StatusData"
data "StatusType" "BOOST"
using "SYMBIOTIC_ENTITY"
// data "DescriptionParams" "GainTemporaryHitPoints(ClassLevel(Druid)*4);DealDamage(1d6,Necrotic)"
data "DescriptionParams" "GainTemporaryHitPoints(ClassLevel(NPC_Druid)*4);DealDamage(1d6,Necrotic)"
// data "Boosts" "TemporaryHP(ClassLevel(Druid)*4);CharacterWeaponDamage(1d6,Necrotic);IF(IsMeleeUnarmedAttack()):CharacterUnarmedDamage(1d6, Necrotic);IF(HasPassive('SpreadingSpores', context.Source)):UnlockSpell(Target_SpreadingSpores)"
data "Boosts" "TemporaryHP(ClassLevel(NPC_Druid)*4);CharacterWeaponDamage(1d6,Necrotic);IF(IsMeleeUnarmedAttack()):CharacterUnarmedDamage(1d6, Necrotic);IF(HasPassive('SpreadingSpores', context.Source)):UnlockSpell(Target_SpreadingSpores)"
new entry "ARP_FungalInfestation_1_1"

type "PassiveData"
data "Properties" "IsHidden"
data "StatsFunctorContext" "OnCreate"
data "StatsFunctors" "ApplyStatus(SELF,ARP_FUNGAL_INFESTATION_1_1,100,-1)"

new entry "ARP_FungalInfestation_1_2"
type "PassiveData"
data "Properties" "IsHidden"
data "StatsFunctorContext" "OnCreate"
data "StatsFunctors" "ApplyStatus(SELF,ARP_FUNGAL_INFESTATION_2_1,100,-1)"

new entry "ARP_FungalInfestation_1_3"
type "PassiveData"
data "Properties" "IsHidden"
data "StatsFunctorContext" "OnCreate"
data "StatsFunctors" "ApplyStatus(SELF,ARP_FUNGAL_INFESTATION_3_1,100,-1)"

new entry "ARP_FungalInfestation_1_4"
type "PassiveData"
data "Properties" "IsHidden"
data "StatsFunctorContext" "OnCreate"
data "StatsFunctors" "ApplyStatus(SELF,ARP_FUNGAL_INFESTATION_4_1,100,-1)"

new entry "ARP_FungalInfestation_1_5"
type "PassiveData"
data "Properties" "IsHidden"
data "StatsFunctorContext" "OnCreate"
data "StatsFunctors" "ApplyStatus(SELF,ARP_FUNGAL_INFESTATION_5_1,100,-1)"

new entry "ARP_FUNGAL_INFESTATION_1_1"
type "StatusData"
data "StatusType" "BOOST"
data "StackId" "ARP_FUNGAL_INFESTATION_1_1"
data "StackType" "Ignore"
data "StatusPropertyFlags" "DisableOverhead;DisableCombatlog;DisablePortraitIndicator;IgnoreResting;ApplyToDead"
data "Boosts" "ActionResource(FungalInfestationCharge,1,1)"
data "RemoveConditions" "not HasPassive('ARP_FungalInfestation_1_1')"
data "RemoveEvents" "OnTurn;OnStatusApplied;OnStatusRemoved"

new entry "ARP_FUNGAL_INFESTATION_2_1"
type "StatusData"
data "StatusType" "BOOST"
data "StackId" "ARP_FUNGAL_INFESTATION_2_1"
data "StackType" "Ignore"
data "StatusPropertyFlags" "DisableOverhead;DisableCombatlog;DisablePortraitIndicator;IgnoreResting;ApplyToDead"
data "Boosts" "ActionResource(FungalInfestationCharge,2,1)"
data "RemoveConditions" "not HasPassive('ARP_FungalInfestation_1_2')"
data "RemoveEvents" "OnTurn;OnStatusApplied;OnStatusRemoved"

new entry "ARP_FUNGAL_INFESTATION_3_1"
type "StatusData"
data "StatusType" "BOOST"
data "StackId" "ARP_FUNGAL_INFESTATION_3_1"
data "StackType" "Ignore"
data "StatusPropertyFlags" "DisableOverhead;DisableCombatlog;DisablePortraitIndicator;IgnoreResting;ApplyToDead"
data "Boosts" "ActionResource(FungalInfestationCharge,3,1)"
data "RemoveConditions" "not HasPassive('ARP_FungalInfestation_1_3')"
data "RemoveEvents" "OnTurn;OnStatusApplied;OnStatusRemoved"

new entry "ARP_FUNGAL_INFESTATION_4_1"
type "StatusData"
data "StatusType" "BOOST"
data "StackId" "ARP_FUNGAL_INFESTATION_4_1"
data "StackType" "Ignore"
data "StatusPropertyFlags" "DisableOverhead;DisableCombatlog;DisablePortraitIndicator;IgnoreResting;ApplyToDead"
data "Boosts" "ActionResource(FungalInfestationCharge,4,1)"
data "RemoveConditions" "not HasPassive('ARP_FungalInfestation_1_4')"
data "RemoveEvents" "OnTurn;OnStatusApplied;OnStatusRemoved"

new entry "ARP_FUNGAL_INFESTATION_5_1"
type "StatusData"
data "StatusType" "BOOST"
data "StackId" "ARP_FUNGAL_INFESTATION_5_1"
data "StackType" "Ignore"
data "StatusPropertyFlags" "DisableOverhead;DisableCombatlog;DisablePortraitIndicator;IgnoreResting;ApplyToDead"
data "Boosts" "ActionResource(FungalInfestationCharge,5,1)"
data "RemoveConditions" "not HasPassive('ARP_FungalInfestation_1_5')"
data "RemoveEvents" "OnTurn;OnStatusApplied;OnStatusRemoved"

// ==================================== Fighter - Eldritch Knight Bound Weapon ====================================

new entry "Shout_WeaponBond"
type "SpellData"
data "SpellType" "Shout"
using "Shout_WeaponBond"
data "CombatAIOverrideSpell" "Shout_WeaponBond_AI"

new entry "Shout_WeaponBond_AI"
type "SpellData"
data "SpellType" "Shout"
using "Shout_WeaponBond"
// data "CombatAIOverrideSpell" "Shout_WeaponBond_AI"
data "CombatAIOverrideSpell" ""
// data "UseCosts" "ActionPoint:1"
data "UseCosts" ""
// data "Requirements" "!Combat"
data "Requirements" ""
// data "RequirementConditions" "not Unarmed()"
data "RequirementConditions" "not Unarmed() and not HasStatus('WEAPON_BOND', GetActiveWeapon())"

// ==================================== Ranger - Companion Summon ====================================
//TODO: Yeah this doesn't work at all, gotta look at adding the NPC versions of these spells in some fashion. Maybe a passive that just summons it out of combat but checks for NPC versions of the spells.
new entry "Target_RangersCompanion"
type "SpellData"
data "SpellType" "Target"
using "Target_RangersCompanion"
data "CombatAIOverrideSpell" "Target_RangersCompanion_AI"

new entry "Target_RangersCompanion_AI"
type "SpellData"
data "SpellType" "Shout"
using "Target_RangersCompanion"
// data "CombatAIOverrideSpell" "Target_RangersCompanion_AI"
data "CombatAIOverrideSpell" ""
// data "UseCosts" "ActionPoint:1"
data "UseCosts" ""

// ==================================== Sorcerer - NPC Metamagic Passives ====================================

// Temporary workaround just to add metamagic to NPCs, copying the approach from Utut used in Encounters Overhaul (just making them default toggled on)
new entry "Goon_Metamagic_Careful_NPC"
type "PassiveData"
using "Metamagic_Careful"
data "Properties" "IsToggled;ToggledDefaultAddToHotbar;MetaMagic;ToggledDefaultOn"
data "ToggleOnEffect" ""
data "ToggleOffContext" ""

new entry "Goon_Metamagic_Extended_NPC"
type "PassiveData"
using "Metamagic_Extended"
data "Properties" "IsToggled;ToggledDefaultAddToHotbar;MetaMagic;ToggledDefaultOn"
data "ToggleOnEffect" ""
data "ToggleOffContext" ""

new entry "Goon_Metamagic_Quickened_NPC"
type "PassiveData"
using "Metamagic_Quickened"
data "Properties" "IsToggled;ToggledDefaultAddToHotbar;MetaMagic;ToggledDefaultOn"
data "ToggleOnEffect" ""
data "ToggleOffContext" ""

new entry "Goon_Metamagic_Heightened_NPC"
type "PassiveData"
using "Metamagic_Heightened"
data "Properties" "IsToggled;ToggledDefaultAddToHotbar;MetaMagic;ToggledDefaultOn"
data "ToggleOnEffect" ""
data "ToggleOffContext" ""

new entry "Goon_Metamagic_Subtle_NPC"
type "PassiveData"
using "Metamagic_Subtle"
data "Properties" "IsToggled;ToggledDefaultAddToHotbar;MetaMagic;ToggledDefaultOn"
data "ToggleOnEffect" ""
data "ToggleOffContext" ""

// ==================================== Add a safeguard to the goblin extra attack shit so they don't go crazy if given proper Extra Attack ====================================

    new entry "GOB_Boss_RecklessAttack"
    type "PassiveData"
    // using "ExtraAttack"
    using "GOB_Boss_RecklessAttack"
    // data "EnabledConditions" "not Tagged('EXTRA_ATTACK_BLOCKED')"
    data "EnabledConditions" "not Tagged('EXTRA_ATTACK_BLOCKED') and not HasPassive('ExtraAttack') and not HasPassive('ExtraAttack_2')"